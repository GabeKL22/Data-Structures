/**
 * @file Node.hpp
 * @author Dr. Schwesinger
 * CSC 237, Spring 2020, Assignment 1
 */

#ifndef NODE_HPP
#define NODE_HPP

#include <cstddef>
#include <iostream>

/**
 * @class Node
 * @brief A node in a linked list
 */
template <class T>
struct Node {
    /** The data element **/
    T data;
    /** A pointer to the next Node **/
    Node<T>* next;
};


/**
 * Insert an element into a linked list at a given position
 * @pre The position is within the bound of the list, that is,
 *      1 <= position <= length(head)+1
 * @param head the head of the linked list.
 * @param position the list position at which to insert element.
 * @param element the element to insert into the list.
 * @return the head of the modified list
 */
template <class T>
Node<T>* insert(Node<T>* head, int position, T element) {
    Node<T> *newNode = new Node<T>();
    newNode->data = element;
    if (position == 1) {
        newNode->next = head;
        head = newNode;
    }
    else {
        Node<T>* previousNode = head;
        for (int p = 1; p < position-1; p++) {
            previousNode = previousNode->next;
        }
        newNode->next = previousNode->next;
        previousNode->next = newNode;
    }

    return head;
}

/**
 * Display a string representation of the list to standard out.
 * @param head the head of the linked list.
 */
template <class T>
void show(Node<T>* head) {
    Node<T>* currentNode = head;
    while (currentNode != nullptr) {
        std::cout << currentNode->data;
        std::cout << " -> ";
        currentNode = currentNode->next;
    }
    std::cout << "NULL" << std::endl;
}

/**
 * Checks whether the list is empty.
 * @param head the head of the linked list.
 * @return True if the list is empty, otherwise false.
 */
template <class T>
bool isEmpty(Node<T>* head) {
    return head == nullptr;
}


/**
 * Checks the length of the list.
 * @param head the head of the linked list.
 * @return the length of the list
 */
template <class T>
int length(Node<T>* head) {
    return 0;
}

// TODO document and complete the implementation of the following function that
// returns a boolean indicating whether the parameter element is contained
// within the linked list.
template <class T>
bool contains(Node<T>* head, T element) {
    return false;
}

// TODO document and complete the implementation of the following function that
// returns the element at the desired position of the list. Note that the
// positions start at one, unlike a C++ array, where the indices start at zero.
// You can assume that the caller of the function will pass in a valid
// position, but that assumption must be documented appropriately.
template <class T>
T getElement(Node<T>* head, int position) {
    return head->data;
}

// TODO document and complete the implementation of the following function that
// returns the position of the first instance of the element passed in as a
// parameter. If the element is not present in the list, then return -1.
template <class T>
int getPosition(Node<T>* head, T element) {
    return -1;
}

// TODO document and complete the implementation of the following function that
// replaces the element at the desired position of the list and returns the
// head of the modified list. Note that the positions start at one, unlike a
// C++ array, where the indices start at zero. You can assume that the caller
// of the function will pass in a valid position, but that assumption must be
// documented appropriately.
template <class T>
Node<T>* replace(Node<T>* head, int position, T element) {
    return head;
}

// TODO document and complete the implementation of the following function that
// removes the Node at the desired position of the list and returns the head of
// the modified list. Note that the positions start at one, unlike a C++ array,
// where the indices start at zero. You can assume that the caller of the
// function will pass in a valid position, but that assumption must be
// documented appropriately.
template <class T>
Node<T>* remove(Node<T>* head, int position) {
    return head;
}

#endif
